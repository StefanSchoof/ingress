package wiring

import (
	"log"
	"strings"

	"github.com/andig/ingress/pkg/config"
	"github.com/andig/ingress/pkg/data"
)

type wire struct {
	input  string
	output string
}
type wirings []wire

type Mapper struct {
	wirings   []wire
	publisher PublisherMap
}

// NewMapper creates data mapper that is able to Process() input messages by
// sending them to configured output wires
func NewMapper(c []config.Wiring, publisher PublisherMap) *Mapper {
	wirings := make(wirings, 0)
	for _, wiring := range c {
		for _, input := range wiring.Inputs {
			for _, output := range wiring.Outputs {
				mappings := wiring.Mapping
				if len(mappings) == 0 {
					mappings = []string{"auto"}
				}

				m := strings.Join(wiring.Mapping, ",")
				log.Printf("mapper: wiring %s -> %s using %s", input, output, m)

				wire := wire{input, output}
				wirings = append(wirings, wire)
			}
		}
	}

	mapper := &Mapper{
		wirings:   wirings,
		publisher: publisher,
	}
	return mapper
}

// Process data generated by source by passing to all affected targets
func (m *Mapper) Process(d *data.InputData) {
	mapped := false
	for _, wiring := range m.wirings {
		if wiring.input == d.Source {
			mapped = true

			publisher, ok := m.publisher[wiring.output]
			if !ok {
				log.Println("mapper: invalid target " + wiring.output)
				continue
			}

			// publish async
			go publisher.Publish(*d.Data)
		}
	}

	if !mapped {
		log.Println("mapper: invalid source " + d.Source)
	}
}
